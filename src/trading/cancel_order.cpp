/*
        Author: blackb1rd
        Date  : 2025/08/07
        Based on original work by tensaix2j (2017/10/15)

        C++ library for Binance API - Cancel Order
        DELETE /api/v3/order - Cancel order (SIGNED)

        Parameters:
        - symbol: STRING (YES)
        - orderId: LONG (NO)
        - origClientOrderId: STRING (NO)
        - newClientOrderId: STRING (NO) - Used to uniquely identify this cancel.
   Automatically generated by default
        - recvWindow: LONG (NO)
        - timestamp: LONG (YES)
*/
#include "binance.h"
#include "binance_logger.h"
#include "binance_utils.h"

void BinanceCPP::cancel_order(std::string_view symbol,
                              long             orderId,
                              std::string_view origClientOrderId,
                              std::string_view newClientOrderId,
                              long             recvWindow,
                              Json::Value     &json_result) {
  BinanceCPP_logger::write_log("<BinanceCPP::cancel_order>");

  if (api_key.size() == 0 || secret_key.size() == 0) {
    BinanceCPP_logger::write_log(
        "<BinanceCPP::cancel_order> API Key and Secret Key has not been set.");
    return;
  }

  std::string url(BINANCE_HOST);
  url += "/api/v3/order?";

  std::string action = "DELETE";

  std::string post_data("symbol=");
  post_data.append(symbol);

  if (orderId > 0) {
    post_data.append("&orderId=");
    post_data.append(std::to_string(orderId));
  }

  if (!origClientOrderId.empty()) {
    post_data.append("&origClientOrderId=");
    post_data.append(origClientOrderId);
  }

  if (!newClientOrderId.empty()) {
    post_data.append("&newClientOrderId=");
    post_data.append(newClientOrderId);
  }

  if (recvWindow > 0) {
    post_data.append("&recvWindow=");
    post_data.append(std::to_string(recvWindow));
  }

  post_data.append("&timestamp=");
  post_data.append(std::to_string(get_current_ms_epoch()));

  std::string signature = hmac_sha256(secret_key.c_str(), post_data.c_str());
  post_data.append("&signature=");
  post_data.append(signature);

  std::vector<std::string> extra_http_header;
  std::string              header_chunk("X-MBX-APIKEY: ");
  header_chunk.append(api_key);
  extra_http_header.push_back(header_chunk);

  BinanceCPP_logger::write_log(
      "<BinanceCPP::cancel_order> url = |%s|, post_data = |%s|",
      url.c_str(),
      post_data.c_str());

  std::string str_result;
  curl_api_with_header(url, str_result, extra_http_header, post_data, action);

  if (str_result.size() > 0) {
    try {
      Json::Reader reader;
      json_result.clear();
      reader.parse(str_result, json_result);

    } catch (std::exception &e) {
      BinanceCPP_logger::write_log("<BinanceCPP::cancel_order> Error ! %s",
                                   e.what());
    }
    BinanceCPP_logger::write_log("<BinanceCPP::cancel_order> Done.");

  } else {
    BinanceCPP_logger::write_log(
        "<BinanceCPP::cancel_order> Failed to get anything.");
  }

  BinanceCPP_logger::write_log("<BinanceCPP::cancel_order> Done.\n");
}
